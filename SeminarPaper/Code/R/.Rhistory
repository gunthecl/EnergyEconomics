geom_line(aes(y = GER.pv.org, colour = "Original pv series" )) +
geom_line(aes(y = GER.pv.repl, colour = "Replicated pv series")) +
scale_colour_manual("",
breaks = c("Original pv series", "Replicated pv series"),
values = c("grey", "orange")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.pv.both, GER.pv.org, GER.pv.repl,
col.pv.GER, col.pv.GER.org)
# Find columns of German onshore wind data
col.wind_on.GER     <- grepl("DE_wind_on", colnames(medoid.vec))
GER.load            <- medoid.vec[,col.wind_on.GER]
col.wind_on.GER.org <- grepl("DE_wind_on", colnames(dat.original))
# Mutiply each cluster with its size
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.wind_on.repl <- data.frame(list.rbind(days.list))
GER.wind_on.repl <- sort(unlist(GER.wind_on.repl), decreasing = TRUE)
GER.wind_on.org  <- dat.original[,col.wind_on.GER.org]
GER.wind_on.org  <- sort(GER.wind_on.org, decreasing = TRUE)
# Find columns of German offshore wind data
col.wind_off.GER     <- grepl("DE_wind_off", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.wind_off.GER]
col.wind_off.GER.org <- grepl("DE_wind_off", colnames(dat.original))
# Mutiply each cluster with its size
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.wind_off.repl <- data.frame(list.rbind(days.list))
GER.wind_off.repl <- sort(unlist(GER.wind_off.repl), decreasing = TRUE)
GER.wind_off.org  <- dat.original[,col.wind_off.GER.org]
GER.wind_off.org  <- sort(GER.wind_off.org, decreasing = TRUE)
GER.wind.both      <- as.data.frame(cbind(GER.wind_on.org,  GER.wind_on.repl,
GER.wind_off.org, GER.wind_off.repl))
GER.wind.both$hour <- 1:nrow(GER.wind_on.both)
ggplot(GER.wind.both, aes(x = hour)) +
geom_line(aes(y = GER.wind_on.org, colour = "Original onshore series" )) +
geom_line(aes(y = GER.wind_on.repl, colour = "Replicated onshore series")) +
geom_line(aes(y = GER.wind_off.org, colour = "Original offshore series" )) +
geom_line(aes(y = GER.wind_off.repl, colour = "Replicated offshore series")) +
scale_colour_manual("",
breaks = c("Original onshore series", "Replicated onshore series",
"Original offshore series", "Replicated offshore series"),
values = c("grey", "light blue", " dark blue", "black")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.wind.both, GER.wind_on.org, GER.wind_on.repl,
col.wind_on.GER, col.wind_on.GER.org,
GER.wind_off.org, GER.wind_off.repl,
col.wind_off.GER, col.wind_off.GER.org)
length(GER.wind_off.org) == length(GER.wind_off.repl)
################################################################################
# Reproduce 2014 weather year with cluster medoids
days.2014       <- {(365*30)+1}:{365*31}
hours.2014      <- {(365*30*24)+1}:{365*31*24}
cluster.2014    <- clusters[days.2014]
dat.2014.medoid.raw  <- medoid.vec[cluster.2014,]
dat.2014.medoid.list <- list()
# Merge hours back into one vector
for (i in 1:23){
vec.hours <- {i*24-23}:{i*24}
col.vec   <-  dat.2014.medoid.raw[,vec.hours]
day       <- list()
for (j in 1:nrow(col.vec)){
day[[j]] <- as.numeric(col.vec[j,])
}
dat.2014.medoid.list[[i]] <- unlist(t(day))
}
# Finish replicated and original 2014 data set
dat.2014.medoid           <- data.frame(t(list.rbind(dat.2014.medoid.list)))
colnames(dat.2014.medoid) <- colnames(dat.original)
dat.2014.org              <- dat.original[hours.2014,]
# Rescale replicated data set
mean.org   = apply(dat.2014.org, 2, mean)
mean.clust = apply(dat.2014.medoid, 2, mean)
gamma      = (mean.clust-mean.org)
dat.2014.medoid.scaled = as.data.frame(scale(dat.2014.medoid, center = gamma, scale = FALSE))
rm(dat.2014.medoid.raw, dat.2014.medoid.list)
# Compare both data sets
dat.compare  <- cbind(dat.2014.medoid.scaled, dat.2014.org)
vec.names    <- colnames(dat.2014.org)
colnames(dat.compare) <- c(paste0(vec.names, ".rep"), paste0(vec.names, ".org"))
dat.compare$hour  <- 1:8760
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.org,
decreasing = TRUE), colour = "Original LDC" )) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.rep,
decreasing = TRUE), colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_pv_national_current.org,
decreasing = TRUE), colour = "Original pv curve" )) +
geom_line(aes(y = sort(DE_pv_national_current.rep,
decreasing = TRUE), colour = "Replicated pv curve")) +
scale_colour_manual("",
breaks = c("Original pv curve", "Replicated pv curve"),
values = c("grey", "orange")) +
ylab(label="Capacity factor") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_wind_onshore_current.org,
decreasing = TRUE), colour = "Original onshore wind" )) +
geom_line(aes(y = sort(DE_wind_onshore_current.rep,
decreasing = TRUE), colour = "Replicated onshore wind")) +
geom_line(aes(y = sort(DE_wind_offshore_current.org,
decreasing = TRUE), colour = "Original offshore wind" )) +
geom_line(aes(y = sort(DE_wind_offshore_current.rep,
decreasing = TRUE), colour = "Replicated offshore wind")) +
scale_colour_manual("",
breaks = c("Original onshore wind", "Replicated onshore wind",
"Original offshore wind", "Replicated offshore wind" ),
values = c("grey81",  "light blue","grey39","dark blue")) +
ylab(label="Capacity factor") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
################################################################################
# Export
## Store each scenario separately
scenarios <- list()
for (i in 1:nrow(medoid.vec)){
data.raw       <- list()
steps          <- ncol(medoid.vec)/24
for (j in 1:steps){
hours.day    <- {j*24-23}:{j*24}
new.variable <- t(medoid.vec[i,hours.day])
colnames(new.variable) <- colnames(medoid.vec[i,hours.day])[1]
data.raw[[j]] <- (new.variable)
}
scenarios[[i]] <- list.cbind(data.raw)
}
## Split each technology separately
scenario.tech <- list()
pv       <- seq(from = 1, to = 17, by = 3)
onshore  <- seq(from = 2, to = 17, by = 3)
offshore <- seq(from = 3, to = 17, by = 3)
load     <- 18:23
country <- c("LU", "DE", "DK", "FR", "GB", "IB")
for (i in 1:30){
# Save pv vector
scenario.tech[[paste0(i, "pv")]]           <- scenarios[[i]][1:24,pv]
colnames(scenario.tech[[paste0(i, "pv")]]) <- country
rownames(scenario.tech[[paste0(i, "pv")]]) <- 1:24
scenario.tech[[paste0(i, "pv")]]           <- data.frame(scenario.tech[[paste0(i, "pv")]])
# Save onshore vector
scenario.tech[[paste0(i, "on")]] <- scenarios[[i]][1:24,onshore]
colnames(scenario.tech[[paste0(i, "on")]]) <- country
rownames(scenario.tech[[paste0(i, "on")]]) <- 1:24
scenario.tech[[paste0(i, "on")]]    <- data.frame(scenario.tech[[paste0(i, "on")]])
# Save offshore vector
scenario.tech[[paste0(i, "off")]] <- scenarios[[i]][1:24,offshore]
colnames(scenario.tech[[paste0(i, "off")]]) <- country[1:5]
rownames(scenario.tech[[paste0(i, "off")]]) <- 1:24
scenario.tech[[paste0(i, "off")]] <- data.frame(scenario.tech[[paste0(i, "off")]])
# Save load vector
scenario.tech[[paste0(i, "load")]] <- scenarios[[i]][1:24,load]
colnames(scenario.tech[[paste0(i, "load")]]) <- country
rownames(scenario.tech[[paste0(i, "load")]]) <- 1:24
scenario.tech[[paste0(i, "load")]] <- data.frame(scenario.tech[[paste0(i, "load")]])
}
mean.vecs <- list()
for (i in 1:30){
mean.vecs[[i]] <- apply(scenarios[[i]], 2, mean)
}
z <- list.rbind(mean.vecs)
#save(medoid.vec, file = "scenario30.rda")
save(scenarios, file = "scenarios30.rda")
save(scenario.tech, file = "scenariotech30.rda")
write.csv(x = medoid.vec, file = "test.csv")
write.csv(x = scenario.tech, file = "tech.csv")
# Save weights fpr scenarios
weights <- cluster.size/sum(cluster.size)
# Sanity check
sum(cluster.size) == nrow(dat.original)/24
save(weights, file = "weights30.rda")
write.csv(x = weights, file = "weights30.csv")
labels.country <- country
tech <- c("pv", "onshore", "offshore", "load")
labels.tech    <- cbind((rep(1:30, each = 4)), tech)
write.csv(x = labels.tech, file = "labelscen.csv")
write.csv(x = country, file = "labelcountry.csv")
country <- c("LU", "DE", "DK", "FR", "UK", "IB")
for (i in 1:30){
# Save pv vector
scenario.tech[[paste0(i, "pv")]]           <- scenarios[[i]][1:24,pv]
colnames(scenario.tech[[paste0(i, "pv")]]) <- country
rownames(scenario.tech[[paste0(i, "pv")]]) <- 1:24
scenario.tech[[paste0(i, "pv")]]           <- data.frame(scenario.tech[[paste0(i, "pv")]])
# Save onshore vector
scenario.tech[[paste0(i, "on")]] <- scenarios[[i]][1:24,onshore]
colnames(scenario.tech[[paste0(i, "on")]]) <- country
rownames(scenario.tech[[paste0(i, "on")]]) <- 1:24
scenario.tech[[paste0(i, "on")]]    <- data.frame(scenario.tech[[paste0(i, "on")]])
# Save offshore vector
scenario.tech[[paste0(i, "off")]] <- scenarios[[i]][1:24,offshore]
colnames(scenario.tech[[paste0(i, "off")]]) <- country[1:5]
rownames(scenario.tech[[paste0(i, "off")]]) <- 1:24
scenario.tech[[paste0(i, "off")]] <- data.frame(scenario.tech[[paste0(i, "off")]])
# Save load vector
scenario.tech[[paste0(i, "load")]] <- scenarios[[i]][1:24,load]
colnames(scenario.tech[[paste0(i, "load")]]) <- country
rownames(scenario.tech[[paste0(i, "load")]]) <- 1:24
scenario.tech[[paste0(i, "load")]] <- data.frame(scenario.tech[[paste0(i, "load")]])
}
mean.vecs <- list()
for (i in 1:30){
mean.vecs[[i]] <- apply(scenarios[[i]], 2, mean)
}
save(scenario.tech, file = "scenariotech30.rda")
write.csv(x = medoid.vec, file = "test.csv")
write.csv(x = scenario.tech, file = "tech.csv")
# Save weights fpr scenarios
weights <- cluster.size/sum(cluster.size)
weights
# Sanity check
sum(cluster.size) == nrow(dat.original)/24
save(weights, file = "weights30.rda")
write.csv(x = weights, file = "weights30.csv")
labels.country <- country
tech <- c("pv", "onshore", "offshore", "load")
labels.tech    <- cbind((rep(1:30, each = 4)), tech)
write.csv(x = labels.tech, file = "labelscen.csv")
write.csv(x = country, file = "labelcountry.csv")
country
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "reshape", "ggjoy",
"rlist", "stringr", "ggplot2", "reshape2")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
## Change path to working directory
wd.path = "/Users/claudiaguenther/documents/EnergyEconomics/SeminarPaper/Code/R/"
# Read in wind and pv data set
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_1985-2016_final.csv"),
stringsAsFactors = FALSE)
## Change path to working directory
wd.path = "/Users/Lenovo/documents/Github/EnergyEconomics/SeminarPaper/Code/R/"
# Read in wind and pv data set
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_1985-2016_final.csv"),
stringsAsFactors = FALSE)
# Source needed functions
setwd(wd.path)
dat.res$BN_pv_national_current   <- (dat.res$BE_pv_national_current*0.426
+ dat.res$LU_pv_national_current*0.034
+ dat.res$NL_pv_national_current*0.54)
################################################################################
#
# Analysis of weather year & selection of deterministic scenarios
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "reshape", "ggjoy",
"rlist", "stringr", "ggplot2", "reshape2")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
## Change path to working directory
wd.path = "/Users/Lenovo/documents/Github/EnergyEconomics/SeminarPaper/Code/R/"
# Read in wind and pv data set
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_1985-2016_final.csv"),
stringsAsFactors = FALSE)
# Source needed functions
setwd(wd.path)
################################################################################
# Use weighted average for Spain & Portugal, Luxembourg & Netherlands & Belgium
dat.res$LU_pv_national_current   <- (dat.res$BE_pv_national_current*0.426
+ dat.res$LU_pv_national_current*0.034
+ dat.res$NL_pv_national_current*0.54)
dat.res$IB_pv_national_current   <- (dat.res$ES_pv_national_current*0.845
+ dat.res$PT_pv_national_current*0.155)
dat.res$LU_wind_onshore_current  <- (dat.res$BE_wind_onshore_current*0.426
+ dat.res$LU_wind_national_current*0.034
+ dat.res$NL_wind_onshore_current*0.54)
dat.res$IB_wind_onshore_current  <-  (dat.res$ES_wind_national_current*0.845
+ dat.res$PT_wind_national_current*0.155)
dat.res$LU_wind_offshore_current <- (dat.res$BE_wind_offshore_current*0.441
+ dat.res$NL_wind_offshore_current*0.559)
# Select columns
var.vec     <- c("LU_pv_national_current", "LU_wind_onshore_current", "LU_wind_offshore_current",
"DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current",
"IB_pv_national_current", "IB_wind_onshore_current")
dat.original <- dat.res[,var.vec]
# Drop leap year days
leap.hours      <- c((59*24+1):(59*24+24))
years.sequence  <- seq(from = 3, to = (2016-1985+3), by = 4)
hours.year      <- 365*24
leap.days.vec   <- list()
for (i in years.sequence){
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-1))
}
leap.days.vec <- sort(unlist(leap.days.vec))
# Sanity check
length(leap.days.vec) == length(years.sequence)*24
# Exclude leap year days
dat.original     <- dat.original[-leap.days.vec,]
# Restructure data to year data
list.year.hours <- list()
for (i in 1:32){
list.year.hours[[1984+i]] <- {(365*(i-1)*24)+1}:{365*i*24}
}
year.vec          <- rep(1985:2016, each = 8760)
dat.original$year <- year.vec
# Calculate mean availabilities and sd
mean.values      <- dat.original %>%
group_by(year) %>%
summarise_all((mean))
mean.all        <- dat.original %>%
summarise_all((mean))
mean.values      <- gather(data = mean.values, key = "Variable",... = 2:18)
country.vec      <- str_sub(mean.values$Variable, start = 1, end = 2)
variable.vec     <- str_sub(mean.values$Variable, start = 4, end = 50)
mean.values$Country <- country.vec
mean.values$var     <- variable.vec
ggplot(data = mean.values, aes(x=var, y=value)) + geom_boxplot(aes(fill=Country)) +
labs(title="Annual mean availability",
y="Availability")
mean.values <- spread(data = mean.values[,c(1,3:5)], key = "var", value = "value")
ggplot(mean.values, aes(x=factor(year), group=Country, colour=Country)) +
geom_line(aes(y = pv_national_current), linetype = "dashed") +
geom_line(aes(y = wind_onshore_current)) +
geom_line(aes(y = wind_offshore_current), linetype="twodash") +
labs(title="Annual mean availability",
y="Availability",
x = "Year")
# Extreme weather years
dat.2010         <- dat.original[list.year.hours[[2010]],] # low wind, average pv
dat.2003 <- dat.original[list.year.hours[[2003]],] # low wind, aa pv
#dat.1990 <- dat.original[list.year.hours[[1990]],] # high wind, aa pv
dat.2015 <- dat.original[list.year.hours[[2015]],] # high wind, aa pv
dat.1998 <- dat.original[list.year.hours[[1998]],] # high wind, low pv (except Spain)
dat.1987 <- dat.original[list.year.hours[[1987]],] # low wind, low pv
scenario.determ <- list()
pv       <- seq(from = 1, to = 17, by = 3)
onshore  <- seq(from = 2, to = 17, by = 3)
offshore <- seq(from = 3, to = 17, by = 3)
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "reshape", "ggjoy",
"rlist", "stringr", "ggplot2", "reshape2")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
## Change path to working directory
wd.path = "/Users/Lenovo/documents/Github/EnergyEconomics/SeminarPaper/Code/R/"
# Read in wind and pv data set
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_1985-2016_final.csv"),
stringsAsFactors = FALSE)
# Source needed functions
setwd(wd.path)
dat.res$LU_pv_national_current   <- (dat.res$BE_pv_national_current*0.426
+ dat.res$LU_pv_national_current*0.034
+ dat.res$NL_pv_national_current*0.54)
dat.res$IB_pv_national_current   <- (dat.res$ES_pv_national_current*0.845
+ dat.res$PT_pv_national_current*0.155)
dat.res$LU_wind_onshore_current  <- (dat.res$BE_wind_onshore_current*0.426
+ dat.res$LU_wind_national_current*0.034
+ dat.res$NL_wind_onshore_current*0.54)
dat.res$IB_wind_onshore_current  <-  (dat.res$ES_wind_national_current*0.845
+ dat.res$PT_wind_national_current*0.155)
dat.res$LU_wind_offshore_current <- (dat.res$BE_wind_offshore_current*0.441
+ dat.res$NL_wind_offshore_current*0.559)
# Select columns
var.vec     <- c("LU_pv_national_current", "LU_wind_onshore_current", "LU_wind_offshore_current",
"DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current",
"IB_pv_national_current", "IB_wind_onshore_current")
dat.original <- dat.res[,var.vec]
# Drop leap year days
leap.hours      <- c((59*24+1):(59*24+24))
years.sequence  <- seq(from = 3, to = (2016-1985+3), by = 4)
hours.year      <- 365*24
leap.days.vec   <- list()
for (i in years.sequence){
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-1))
}
leap.days.vec <- sort(unlist(leap.days.vec))
# Sanity check
length(leap.days.vec) == length(years.sequence)*24
# Exclude leap year days
dat.original     <- dat.original[-leap.days.vec,]
# Restructure data to year data
list.year.hours <- list()
for (i in 1:32){
list.year.hours[[1984+i]] <- {(365*(i-1)*24)+1}:{365*i*24}
}
year.vec          <- rep(1985:2016, each = 8760)
dat.original$year <- year.vec
# Calculate mean availabilities and sd
mean.values      <- dat.original %>%
group_by(year) %>%
summarise_all((mean))
mean.all        <- dat.original %>%
summarise_all((mean))
mean.values      <- gather(data = mean.values, key = "Variable",... = 2:18)
country.vec      <- str_sub(mean.values$Variable, start = 1, end = 2)
variable.vec     <- str_sub(mean.values$Variable, start = 4, end = 50)
mean.values$Country <- country.vec
mean.values$var     <- variable.vec
ggplot(data = mean.values, aes(x=var, y=value)) + geom_boxplot(aes(fill=Country)) +
labs(title="Annual mean availability",
y="Availability")
mean.values <- spread(data = mean.values[,c(1,3:5)], key = "var", value = "value")
ggplot(mean.values, aes(x=factor(year), group=Country, colour=Country)) +
geom_line(aes(y = pv_national_current), linetype = "dashed") +
geom_line(aes(y = wind_onshore_current)) +
geom_line(aes(y = wind_offshore_current), linetype="twodash") +
labs(title="Annual mean availability",
y="Availability",
x = "Year")
# Extreme weather years
dat.2010         <- dat.original[list.year.hours[[2010]],] # low wind, average pv
dat.2003 <- dat.original[list.year.hours[[2003]],] # low wind, aa pv
#dat.1990 <- dat.original[list.year.hours[[1990]],] # high wind, aa pv
dat.2015 <- dat.original[list.year.hours[[2015]],] # high wind, aa pv
dat.1998 <- dat.original[list.year.hours[[1998]],] # high wind, low pv (except Spain)
dat.1987 <- dat.original[list.year.hours[[1987]],] # low wind, low pv
scenario.determ <- list()
pv       <- seq(from = 1, to = 17, by = 3)
onshore  <- seq(from = 2, to = 17, by = 3)
offshore <- seq(from = 3, to = 17, by = 3)
country <- c("LU", "DE", "DK", "FR", "UK", "IB")
for (i in (c(1987, 1998, 2003,2010,2015))){
# Save pv vector
scenario.determ[[paste0(i, "pv")]]   <- dat.original[list.year.hours[[i]],pv]
colnames(scenario.determ[[paste0(i, "pv")]]) <- country
rownames(scenario.determ[[paste0(i, "pv")]]) <- 1:8760
scenario.determ[[paste0(i, "pv")]]           <- data.frame(scenario.determ[[paste0(i, "pv")]])
# Save onshore vector
scenario.determ[[paste0(i, "on")]] <- dat.original[list.year.hours[[i]],onshore]
colnames(scenario.determ[[paste0(i, "on")]]) <- country
rownames(scenario.determ[[paste0(i, "on")]]) <- 1:8760
scenario.determ[[paste0(i, "on")]]    <- data.frame(scenario.determ[[paste0(i, "on")]])
# Save offshore vector
scenario.determ[[paste0(i, "off")]] <- dat.original[list.year.hours[[i]],offshore]
colnames(scenario.determ[[paste0(i, "off")]]) <- country[1:5]
rownames(scenario.determ[[paste0(i, "off")]]) <- 1:8760
scenario.determ[[paste0(i, "off")]] <- data.frame(scenario.determ[[paste0(i, "off")]])
}
save(scenario.determ, file = "scenarios_deterministic.rda")
View(scenario.determ)
