dat.new  <- list()
24*7
j       <- i*24*7 - 167
dat.new  <- list()
for (i in 1:(nrow(dat)/(24*7))){
j       <- i*24*7 - 167
dat.day   <- dat[j:(j+167),]
data_long <- melt(dat.day)
data_wide <- t(data_long$value)
colnames(data_wide) <- data_long$variable
dat.new[[i]] <- data_wide
}
dat <- data.frame(list.rbind(dat.new))
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "rlist", "caret", "ggplot2", "reshape2", "grid")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
dat.new  <- list()
for (i in 1:(nrow(dat)/(24*7))){
j       <- i*24*7 - 167
dat.day   <- dat[j:(j+167),]
data_long <- melt(dat.day)
data_wide <- t(data_long$value)
colnames(data_wide) <- data_long$variable
dat.new[[i]] <- data_wide
}
dat <- data.frame(list.rbind(dat.new))
Dis.ecl <- dist(dat, method = "euclidean")
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
clusters = cutree(clus, k = 150)
rect.hclust(clus, k=80, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat, clusters))
cluster.k          <-  kmeans(dat, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
test.GB.load <- cluster.center[,433:456]
3192-167
test.GB.load <- cluster.center[,3025:3192]
days.list    <- list()
days.repl    <- for (i in 1:length(cluster.k$size)){
x <- as.data.frame(test.GB.load[rep(i, cluster.k$size[i]),])
days.list[[i]] <- x
}
test.GB      <- data.frame(list.rbind(days.list))
all.hours.GB <- unlist(test.GB)
org.GB       <- sort(((dat.original$GB_load_entsoe_power_statistics - max(dat.original$GB_load_entsoe_power_statistics))/
(max(dat.original$GB_load_entsoe_power_statistics)- min(dat.original$GB_load_entsoe_power_statistics))), decreasing = TRUE)
plot(sort(all.hours.GB, decreasing = TRUE), type = "l")
par(mar = rep(2, 4))
plot(sort(all.hours.GB, decreasing = TRUE),type="l",col="red")
lines(org.GB, col="green")
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_singleindex_1980-2016.csv"),
stringsAsFactors = FALSE)
dat.load.2014      <- read.csv(paste0(wd.path,"time_series_60min_load.csv"),
stringsAsFactors = FALSE)
var.vec     <- c("DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
"ES_pv_national_current", "ES_wind_national_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current")
var.vec.load <- c("DE_load_entsoe_power_statistics",
"DK_load_entsoe_power_statistics",
"ES_load_entsoe_power_statistics",
"FR_load_entsoe_power_statistics",
"GB_load_entsoe_power_statistics")
dat.original <- dat.res[,var.vec]
var.vec     <- c("DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
# "ES_pv_national_current", "ES_wind_national_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current")
var.vec.load <- c("DE_load_entsoe_power_statistics",
"DK_load_entsoe_power_statistics",
"ES_load_entsoe_power_statistics",
"FR_load_entsoe_power_statistics",
"GB_load_entsoe_power_statistics")
dat.original <- dat.res[,var.vec]
var.vec.load <- c("DE_load_entsoe_power_statistics",
"DK_load_entsoe_power_statistics",
#                  "ES_load_entsoe_power_statistics",
"FR_load_entsoe_power_statistics",
"GB_load_entsoe_power_statistics")
dat.original <- dat.res[,var.vec]
dat.load     <- dat.load.2014[,var.vec.load]
2016-1979
36/4
years.sequence  <- seq(from = 1, to = (2016-1980)/4, by = 4)
years.sequence  <- seq(from = 1, to = (2016-1980), by = 4)
hours.year      <- 365*4
hours.year      <- 365*24
years.sequence  <- seq(from = 4, to = (2016-1980+3), by = 4)
a <- leap.hours + hours.year*years.sequence
a <- c(leap.hours + hours.year*years.sequence)
hours.year*years.sequence
a <- leap.hours + (hours.year*years.sequence)
(hours.year*years.sequence)
b <- (hours.year*years.sequence)
a + b
a .+ b
a <- rep(leap.hours, length(years.sequence) + (hours.year*years.sequence)
# Bind load data (2014) to all years
load.vec <- dat.load[rep(seq_len(nrow(dat.load)), each=nrow(dat.original)/nrow(dat.load)),]
dat.original     <- cbind(dat.original[-leap.days.vec,], load.vec)
# Normalize with maximum value
dat <-  as.data.frame(apply(dat.original, 2, function(x){
( x - max(x)) / (max(x) - min(x))
}))
#dat <-  as.data.frame(apply(dat.original, 2, function(x){
#  ( x - mean(x)) / sd(x)
#}))
# Keep only every third hour
#dat <- dat[seq(from = 1, to = nrow(dat), by = 3),]
# Reshape data (each hour becomes a variable)
#dat$hour <- rep(paste0("h", 1:24), nrow(dat)/24)
dat.new  <- list()
for (i in 1:(nrow(dat)/(24*7))){
j       <- i*24*7 - 167
dat.day   <- dat[j:(j+167),]
data_long <- melt(dat.day)
data_wide <- t(data_long$value)
colnames(data_wide) <- data_long$variable
dat.new[[i]] <- data_wide
}
dat <- data.frame(list.rbind(dat.new))
# Use euclidean distance
Dis.ecl <- dist(dat, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
a <- rep(leap.hours, length(years.sequence) + (hours.year*years.sequence))
length(years.sequence)
a <- rep(leap.hours, length(years.sequence)) + (hours.year*years.sequence)
a
sort(a)
years.sequence  <- seq(from = 0, to = (2016-1980+3), by = 4)
years.sequence  <- seq(from = 0, to = (2016-1980+3), by = 4)
leap.days.vec   <- ls()
i = 0
leap.days.vec   <- ls()
leap.days.vec[i]  <- leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.days.vec   <- ls()
leap.days.vec[i]  <- leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.hours
hours.year*years.sequence[0]
24*years.sequence[0]
leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.days.vec[[i]]  <- leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.hours + hours.year*years.sequence[0]
leap.days.vec[[i]]  <- leap.hours
leap.days.vec[i]  <- leap.hours
if (i == 0){
leap.days.vec[i]  <- leap.hours
}
leap.days.vec[i]  <- leap.hours
leap.days.vec[i+100]  <- leap.hours
leap.days.vec
leap.days.vec   <- list()
leap.days.vec[i+100]  <- leap.hours
leap.days.vec[[i+100]]  <- leap.hours
leap.days.vec[[i+100]]
View(dat.res)
dat.res[1417,]$time
i = 2
leap.days.vec[[i]]  <- leap.hours + hours.year*years.sequence[0] + 24*years.sequence[0]
leap.days.vec[[i]]
leap.days.vec[[i]]  <- leap.hours + hours.year*years.sequence[i] + 24*years.sequence[i]
leap.days.vec[[i]]
dat.res[36553,]$time
i = 0
leap.days.vec[[i]]     <- leap.hours + hours.year*years.sequence[i] + 24*years.sequence[i]
leap.days.vec[[i]]
j   <- which(years.sequence == i)
leap.hours + hours.year*years.sequence[i] + 24*years.sequence[i]
i = 1
j   <- which(years.sequence == i)
i = 4
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + hours.year*years.sequence[i] + 24*years.sequence[j]
leap.days.vec[[i]]
leap.days.vec[[i]]     <- leap.hours + hours.year*years.sequence[i] + 24*j
leap.days.vec[[i]]
leap.days.vec[[i]]     <- leap.hours + hours.year*years.sequence[i] + 24*j
leap.days.vec[[i]]
leap.hours
years.sequence
hours.year      <- 365*24
24*j
hours.year*years.sequence[i]
leap.days.vec[[i]]     <- leap.hours + hours.year*years.sequence[i] + 24*j
leap.days.vec[[i]]
dat.res[106585,]$time
leap.days.vec[[i]]     <- leap.hours + ((hours.year*years.sequence[i]) + (24*j) )
leap.days.vec[[i]]
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*j)
leap.days.vec[[i]]
dat.res[36505,]$time
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*j)
leap.days.vec[[i]]
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-1))
leap.days.vec[[i]]
dat.res[36481,]$time
leap.hours      <- c((59*24+1):(59*24+24))
years.sequence  <- seq(from = 0, to = (2016-1980+3), by = 4)
hours.year      <- 365*24
leap.days.vec   <- list()
i = 4
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-1))
leap.days.vec[[i]]
leap.hours
hours.year
hours.year*i
j-1
24*(j-1)
hours.year*i + 24*(j-1)
leap.hours + (hours.year*i + 24*(j-1))
dat.res[36481,]$time
dat.res[36482,]$time
leap.hours      <- c((59*24+1):(59*24+24))
leap.hours
dat.res[1417,]$time
leap.days.vec[[i]]     <- leap.hours + (hours.year*i)
leap.days.vec[[i]]
dat.res[36457,]$time
i = 2
i = 8
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i)
leap.days.vec[[i]]
dat.res[71497,]$time
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
leap.days.vec[[i]]
dat.res[71521,]$time
dat.res[71544,]$time
i = 8
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
leap.days.vec[[i]]
i = 12
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
leap.days.vec[[i]]
dat.res[106585,]$time
i = 36
j   <- which(years.sequence == i)
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
leap.days.vec[[i]]
dat.res[316969,]$time
for (i in years.sequence){
j   <- which(years.sequence == i)
if (i == 0){
leap.days.vec[[i+100]] <- leap.hours
}
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
}
leap.days.vec[[i+100]] <- leap.hours
j   <- which(years.sequence == i)
if (i == 0){
leap.days.vec[[i+100]] <- leap.hours
}
for (i in years.sequence){
j   <- which(years.sequence == i)
if (i == 0){
leap.days.vec[[i+100]] <- leap.hours
next
}
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
}
leap.days.vec <- sort(unlist(leap.days.vec))
length(leap.days.vec) == length(years.sequence)*24
load.vec <- dat.load[rep(seq_len(nrow(dat.load)), each=nrow(dat.original)/nrow(dat.load)),]
dat.original     <- cbind(dat.original[-leap.days.vec,], load.vec)
dat <-  as.data.frame(apply(dat.original, 2, function(x){
( x - max(x)) / (max(x) - min(x))
}))
dat.original     <- dat.original[-leap.days.vec,]
load.vec         <- dat.load[rep(seq_len(nrow(dat.load)), each=nrow(dat.original)/nrow(dat.load)),]
load.vec         <- dat.load[rep(seq_len(nrow(dat.load)), each=nrow(dat.original)/nrow(dat.load)),]
nrow(dat.original)
nrow(dat.original)/nrow(dat.load)
nrow(dat.original)/365
rm(list = ls())
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "rlist", "caret", "ggplot2", "reshape2", "grid")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
wd.path = "/Users/claudiaguenther/Documents/EnergyEconomics/SeminarPaper/Code/R/"
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_singleindex_1980-2016.csv"),
stringsAsFactors = FALSE)
dat.load.2014      <- read.csv(paste0(wd.path,"time_series_60min_load.csv"),
stringsAsFactors = FALSE)
var.vec     <- c("DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
# "ES_pv_national_current", "ES_wind_national_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current")
var.vec.load <- c("DE_load_entsoe_power_statistics",
"DK_load_entsoe_power_statistics",
#                  "ES_load_entsoe_power_statistics",
"FR_load_entsoe_power_statistics",
"GB_load_entsoe_power_statistics")
dat.original <- dat.res[,var.vec]
dat.load     <- dat.load.2014[,var.vec.load]
leap.hours      <- c((59*24+1):(59*24+24))
years.sequence  <- seq(from = 0, to = (2016-1980+3), by = 4)
hours.year      <- 365*24
leap.days.vec   <- list()
for (i in years.sequence){
j   <- which(years.sequence == i)
if (i == 0){
leap.days.vec[[i+100]] <- leap.hours
next
}
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
}
leap.days.vec <- sort(unlist(leap.days.vec))
length(leap.days.vec) == length(years.sequence)*24
dat.original     <- dat.original[-leap.days.vec,]
nrow(dat.original)/nrow(dat.load))
nrow(dat.original)/nrow(dat.load)
wd.path = "/Users/claudiaguenther/Documents/EnergyEconomics/SeminarPaper/Code/R/"
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_singleindex_1980-2016.csv"),
stringsAsFactors = FALSE)
dat.load.2014      <- read.csv(paste0(wd.path,"time_series_60min_load.csv"),
stringsAsFactors = FALSE)
var.vec     <- c("DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
# "ES_pv_national_current", "ES_wind_national_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current")
var.vec.load <- c("DE_load_entsoe_power_statistics",
"DK_load_entsoe_power_statistics",
#                  "ES_load_entsoe_power_statistics",
"FR_load_entsoe_power_statistics",
"GB_load_entsoe_power_statistics")
dat.original <- dat.res[,var.vec]
dat.load     <- dat.load.2014[,var.vec.load]
leap.hours      <- c((59*24+1):(59*24+24))
years.sequence  <- seq(from = 0, to = (2016-1980+3), by = 4)
hours.year      <- 365*24
leap.days.vec   <- list()
for (i in years.sequence){
j   <- which(years.sequence == i)
if (i == 0){
leap.days.vec[[i+100]] <- leap.hours
next
}
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
}
leap.days.vec <- sort(unlist(leap.days.vec))
leap.days.vec
f = dat.res[leap.days.vec,]$time
f = as.data.frame(f)
View(f)
View(dat.res)
35040/24
35040/24 - 24
365*4
nrow(dat.res)
nrow(dat.res)/365
nrow(dat.res)-24*8
(nrow(dat.res)-24*8)/24
(nrow(dat.res)-24*8)/24/365
dat.res            <- read.csv(paste0(wd.path,"ninja_pv_wind_profiles_singleindex_1980-2016.csv"),
stringsAsFactors = FALSE)
dat.load.2014      <- read.csv(paste0(wd.path,"time_series_60min_load.csv"),
stringsAsFactors = FALSE)
var.vec     <- c("DE_pv_national_current", "DE_wind_onshore_current", "DE_wind_offshore_current",
"DK_pv_national_current", "DK_wind_onshore_current", "DK_wind_offshore_current",
# "ES_pv_national_current", "ES_wind_national_current",
"FR_pv_national_current", "FR_wind_onshore_current", "FR_wind_offshore_current",
"GB_pv_national_current", "GB_wind_onshore_current", "GB_wind_offshore_current")
var.vec.load <- c("DE_load_entsoe_power_statistics",
"DK_load_entsoe_power_statistics",
#                  "ES_load_entsoe_power_statistics",
"FR_load_entsoe_power_statistics",
"GB_load_entsoe_power_statistics")
dat.original <- dat.res[,var.vec]
dat.load     <- dat.load.2014[,var.vec.load]
leap.hours      <- c((59*24+1):(59*24+24))
years.sequence  <- seq(from = 0, to = (2016-1980+3), by = 4)
hours.year      <- 365*24
leap.days.vec   <- list()
for (i in years.sequence){
j   <- which(years.sequence == i)
if (i == 0){
# leap.days.vec[[i+100]] <- leap.hours
next
}
leap.days.vec[[i]]     <- leap.hours + (hours.year*i + 24*(j-2))
}
leap.days.vec <- sort(unlist(leap.days.vec))
length(leap.days.vec) == length(years.sequence)*24
length(leap.days.vec) == length(years.sequence)*24 - 24
length(leap.days.vec) == length(years.sequence)*24 - 24 # December 31 missing in 1980
dat.original     <- dat.original[-leap.days.vec,]
nrow(dat.original)/nrow(dat.load)
load.vec         <- dat.load[rep(seq_len(nrow(dat.load)), each=nrow(dat.original)/nrow(dat.load)),]
dat.original     <- cbind(dat.original[-leap.days.vec,], load.vec)
nrow(dat.original)/nrow(dat.load))
nrow(dat.original)/nrow(dat.load)
load.vec         <- dat.load[rep(seq_len(nrow(dat.load)), each=nrow(dat.original)/nrow(dat.load)),]
dat.original     <- cbind(dat.original, load.vec)
dat <-  as.data.frame(apply(dat.original, 2, function(x){
( x - max(x)) / (max(x) - min(x))
}))
dat.new  <- list()
for (i in 1:(nrow(dat)/(24*7))){
j       <- i*24*7 - 167
dat.day   <- dat[j:(j+167),]
data_long <- melt(dat.day)
data_wide <- t(data_long$value)
colnames(data_wide) <- data_long$variable
dat.new[[i]] <- data_wide
}
dat <- data.frame(list.rbind(dat.new))
Dis.ecl <- dist(dat, method = "euclidean")
clus <- hclust(Dis.ecl, method = "ward.D2")
par(mar = rep(2, 4))
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
clus <- hclust(Dis.ecl, method = "ward.D2")
par(mar = rep(2, 4))
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
clusters = cutree(clus, k = 150)
rect.hclust(clus, k=80, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat, clusters))
cluster.k          <-  kmeans(dat, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat,
cluster.k$cluster)))
clusters = cutree(clus, k = 80)
rect.hclust(clus, k=80, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat, clusters))
cluster.k          <-  kmeans(dat, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
test.GB.load <- cluster.center[,3025:3192]
days.list    <- list()
days.repl    <- for (i in 1:length(cluster.k$size)){
x <- as.data.frame(test.GB.load[rep(i, cluster.k$size[i]),])
days.list[[i]] <- x
}
cluster.k          <-  kmeans(dat, centers = centroids)
clusters = cutree(clus, k = 50)
rect.hclust(clus, k=80, border="red")
clusters = cutree(clus, k = 20)
rect.hclust(clus, k=80, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat, clusters))
cluster.k          <-  kmeans(dat, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat,
cluster.k$cluster)))
centroids = t(sapply(unique(clusters), clust.centroid, dat, clusters))
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
clusters = cutree(clus, k = 5)
rect.hclust(clus, k=80, border="red")
rect.hclust(clus, k=5, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat, clusters))
cluster.k          <-  kmeans(dat, centers = centroids)
