j       <- i*24 - 23
dat.day   <- dat[j:(j+23),]
data_long <- melt(dat.day)
data_wide <- t(data_long$value)
colnames(data_wide) <- data_long$variable
dat.new[[i]] <- data_wide
}
dat <- data.frame(list.rbind(dat.new))
# Repeat for unscaled data
for (i in 1:(nrow(dat.unscaled)/(24))){
j       <- i*24 - 23
dat.day   <- dat.unscaled[j:(j+23),]
data_long <- melt(dat.day)
data_wide <- t(data_long$value)
colnames(data_wide) <- data_long$variable
dat.new[[i]] <- data_wide
}
dat.unscaled <- data.frame(list.rbind(dat.new))
# Use euclidean distance
Dis.ecl <- dist(dat, method = "euclidean")
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
#par(mar = rep(2, 4))
#plot(clus)
#plot(clus, hang = -1, cex = 0.6)
#dendrogram <- as.dendrogram(clus)
#plot(dendrogram, ylab = "Height", leaflab = "none")
# Determine the number of clusters
no.cl    = 50
clusters = cutree(clus, k = no.cl)
rect.hclust(clus, k= no.cl, border="red")
# Find centroids and medoids of clusters
centroid.vec  <- clust.centroid(dataframe = dat.unscaled, clusters.IND = clusters)
medoid.IND    <- clust.medoid(clusters.IND = clusters, distancematrix = as.matrix(Dis.ecl))
medoid.vec    <- dat.unscaled[medoid.IND,]
# Determine cluster sizes
cluster.size  <- table(clusters)
######################################################################
# Rescale replicated data set
######################################################################
## Compare load duration, wind and pv factor curves for Germany
# Find columns of German load data
col.load.GER     <- grepl("DE_load", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.load.GER]
col.load.GER.org <- grepl("DE_load", colnames(dat.original))
# Mutiply each cluster with its size
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.load.repl <- data.frame(list.rbind(days.list))
GER.load.repl <- sort(unlist(GER.load.repl), decreasing = TRUE)
GER.load.org  <- dat.original[,col.load.GER.org]
GER.load.org  <- sort(GER.load.org, decreasing = TRUE)
GER.load.both <- as.data.frame(cbind(GER.load.org, GER.load.repl))
GER.load.both$hour <- 1:nrow(GER.load.both)
ggplot(GER.load.both, aes(x = hour)) +
geom_line(aes(y = GER.load.org, colour = "Original LDC" )) +
geom_line(aes(y = GER.load.repl, colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.load.both, GER.load.org, GER.load.repl,
col.load.GER, col.load.GER.org)
# Find columns of German pv data
col.pv.GER     <- grepl("DE_pv", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.pv.GER]
col.pv.GER.org <- grepl("DE_pv", colnames(dat.original))
# Mutiply each cluster with its size
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.pv.repl <- data.frame(list.rbind(days.list))
GER.pv.repl <- sort(unlist(GER.pv.repl), decreasing = TRUE)
GER.pv.org  <- dat.original[,col.pv.GER.org]
GER.pv.org  <- sort(GER.pv.org, decreasing = TRUE)
GER.pv.both <- as.data.frame(cbind(GER.pv.org, GER.pv.repl))
GER.pv.both$hour <- 1:nrow(GER.pv.both)
ggplot(GER.pv.both, aes(x = hour)) +
geom_line(aes(y = GER.pv.org, colour = "Original pv series" )) +
geom_line(aes(y = GER.pv.repl, colour = "Replicated pv series")) +
scale_colour_manual("",
breaks = c("Original pv series", "Replicated pv series"),
values = c("grey", "orange")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.pv.both, GER.pv.org, GER.pv.repl,
col.pv.GER, col.pv.GER.org)
# Find columns of German onshore wind data
col.wind_on.GER     <- grepl("DE_wind_on", colnames(medoid.vec))
GER.load            <- medoid.vec[,col.wind_on.GER]
col.wind_on.GER.org <- grepl("DE_wind_on", colnames(dat.original))
# Mutiply each cluster with its size
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.wind_on.repl <- data.frame(list.rbind(days.list))
GER.wind_on.repl <- unlist(GER.wind_on.repl)
GER.wind_on.org  <- dat.original[,col.wind_on.GER.org]
GER.wind_on.org  <- sort(GER.wind_on.org, decreasing = TRUE)
par(mar = rep(2, 4))
plot(sort(GER.wind_on.repl, decreasing = TRUE),type="l",col="red")
lines(GER.wind_on.org, col="green")
length(GER.wind_on.org) == length(GER.wind_on.repl)
# Find columns of German offshore wind data
col.wind_off.GER     <- grepl("DE_wind_off", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.wind_off.GER]
col.wind_off.GER.org <- grepl("DE_wind_off", colnames(dat.original))
# Mutiply each cluster with its size
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.wind_off.repl <- data.frame(list.rbind(days.list))
GER.wind_off.repl <- unlist(GER.wind_off.repl)
GER.wind_off.org  <- dat.original[,col.wind_off.GER.org]
GER.wind_off.org  <- sort(GER.wind_off.org, decreasing = TRUE)
par(mar = rep(2, 4))
plot(sort(GER.wind_off.repl, decreasing = TRUE),type="l",col="red")
lines(GER.wind_off.org, col="green")
length(GER.wind_off.org) == length(GER.wind_off.repl)
################################################################################
# Reproduce 2014 weather year with cluster medoids
days.2014       <- {(365*29)+1}:{365*30}
hours.2014      <- {(365*29*24)+1}:{365*30*24}
cluster.2014    <- clusters[days.2014]
dat.2014.medoid.raw  <- medoid.vec[cluster.2014,]
dat.2014.medoid.list <- list()
# Merge hours back into one vector
for (i in 1:25){
vec.hours <- {i*24-23}:{i*24}
col.vec   <-  dat.2014.medoid.raw[,vec.hours]
day       <- list()
for (j in 1:nrow(col.vec)){
day[[j]] <- as.numeric(col.vec[j,])
}
dat.2014.medoid.list[[i]] <- unlist(t(day))
}
# Finish replicated and original 2014 data set
dat.2014.medoid           <- data.frame(t(list.rbind(dat.2014.medoid.list)))
colnames(dat.2014.medoid) <- colnames(dat.original)
dat.2014.org              <- dat.original[hours.2014,]
# Rescale replicated data set
mean.org   = apply(dat.2014.org, 2, mean)
mean.clust = apply(dat.2014.medoid, 2, mean)
gamma      = (mean.clust-mean.org)
dat.2014.medoid.scaled = as.data.frame(scale(dat.2014.medoid, center = gamma, scale = FALSE))
rm(dat.2014.medoid.raw, dat.2014.medoid.list)
# Compare both data sets
dat.compare  <- cbind(dat.2014.medoid.scaled, dat.2014.org)
vec.names    <- colnames(dat.2014.org)
colnames(dat.compare) <- c(paste0(vec.names, ".rep"), paste0(vec.names, ".org"))
dat.compare$hour  <- 1:8760
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.org,
decreasing = TRUE), colour = "Original LDC" )) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.rep,
decreasing = TRUE), colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_pv_national_current.org,
decreasing = TRUE), colour = "Original pv curve" )) +
geom_line(aes(y = sort(DE_pv_national_current.rep,
decreasing = TRUE), colour = "Replicated pv curve")) +
scale_colour_manual("",
breaks = c("Original pv curve", "Replicated pv curve"),
values = c("grey", "orange")) +
ylab(label="Capacity factor") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_wind_onshore_current.org,
decreasing = TRUE), colour = "Original onshore wind" )) +
geom_line(aes(y = sort(DE_wind_onshore_current.rep,
decreasing = TRUE), colour = "Replicated onshore wind")) +
geom_line(aes(y = sort(DE_wind_offshore_current.org,
decreasing = TRUE), colour = "Original offshore wind" )) +
geom_line(aes(y = sort(DE_wind_offshore_current.rep,
decreasing = TRUE), colour = "Replicated offshore wind")) +
scale_colour_manual("",
breaks = c("Original onshore wind", "Replicated onshore wind",
"Original offshore wind", "Replicated offshore wind" ),
values = c("grey81",  "light blue","grey39","dark blue")) +
ylab(label="Capacity factor") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
no.cl    = 30
clusters = cutree(clus, k = no.cl)
rect.hclust(clus, k= no.cl, border="red")
centroid.vec  <- clust.centroid(dataframe = dat.unscaled, clusters.IND = clusters)
medoid.IND    <- clust.medoid(clusters.IND = clusters, distancematrix = as.matrix(Dis.ecl))
medoid.vec    <- dat.unscaled[medoid.IND,]
cluster.size  <- table(clusters)
col.load.GER     <- grepl("DE_load", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.load.GER]
col.load.GER.org <- grepl("DE_load", colnames(dat.original))
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.load.repl <- data.frame(list.rbind(days.list))
GER.load.repl <- sort(unlist(GER.load.repl), decreasing = TRUE)
GER.load.org  <- dat.original[,col.load.GER.org]
GER.load.org  <- sort(GER.load.org, decreasing = TRUE)
GER.load.both <- as.data.frame(cbind(GER.load.org, GER.load.repl))
GER.load.both$hour <- 1:nrow(GER.load.both)
ggplot(GER.load.both, aes(x = hour)) +
geom_line(aes(y = GER.load.org, colour = "Original LDC" )) +
geom_line(aes(y = GER.load.repl, colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.load.both, GER.load.org, GER.load.repl,
col.load.GER, col.load.GER.org)
days.2014       <- {(365*29)+1}:{365*30}
hours.2014      <- {(365*29*24)+1}:{365*30*24}
cluster.2014    <- clusters[days.2014]
dat.2014.medoid.raw  <- medoid.vec[cluster.2014,]
dat.2014.medoid.list <- list()
for (i in 1:25){
vec.hours <- {i*24-23}:{i*24}
col.vec   <-  dat.2014.medoid.raw[,vec.hours]
day       <- list()
for (j in 1:nrow(col.vec)){
day[[j]] <- as.numeric(col.vec[j,])
}
dat.2014.medoid.list[[i]] <- unlist(t(day))
}
dat.2014.medoid           <- data.frame(t(list.rbind(dat.2014.medoid.list)))
colnames(dat.2014.medoid) <- colnames(dat.original)
dat.2014.org              <- dat.original[hours.2014,]
mean.org   = apply(dat.2014.org, 2, mean)
mean.clust = apply(dat.2014.medoid, 2, mean)
gamma      = (mean.clust-mean.org)
dat.2014.medoid.scaled = as.data.frame(scale(dat.2014.medoid, center = gamma, scale = FALSE))
rm(dat.2014.medoid.raw, dat.2014.medoid.list)
dat.compare  <- cbind(dat.2014.medoid.scaled, dat.2014.org)
vec.names    <- colnames(dat.2014.org)
colnames(dat.compare) <- c(paste0(vec.names, ".rep"), paste0(vec.names, ".org"))
dat.compare$hour  <- 1:8760
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.org,
decreasing = TRUE), colour = "Original LDC" )) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.rep,
decreasing = TRUE), colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
ggplot(dat.compare, aes(x = hour)) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.org,
decreasing = TRUE), colour = "Original LDC" )) +
geom_line(aes(y = sort(DE_load_entsoe_power_statistics.rep,
decreasing = TRUE), colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hour") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
col.load.GER     <- grepl("DE_load", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.load.GER]
col.load.GER.org <- grepl("DE_load", colnames(dat.original))
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.load.repl <- data.frame(list.rbind(days.list))
GER.load.repl <- sort(unlist(GER.load.repl), decreasing = TRUE)
GER.load.org  <- dat.original[,col.load.GER.org]
GER.load.org  <- sort(GER.load.org, decreasing = TRUE)
GER.load.both <- as.data.frame(cbind(GER.load.org, GER.load.repl))
GER.load.both$hour <- 1:nrow(GER.load.both)
ggplot(GER.load.both, aes(x = hour)) +
geom_line(aes(y = GER.load.org, colour = "Original LDC" )) +
geom_line(aes(y = GER.load.repl, colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.load.both, GER.load.org, GER.load.repl,
col.load.GER, col.load.GER.org)
GER.pv.both <- as.data.frame(cbind(GER.pv.org, GER.pv.repl))
col.pv.GER     <- grepl("DE_pv", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.pv.GER]
col.pv.GER.org <- grepl("DE_pv", colnames(dat.original))
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.pv.repl <- data.frame(list.rbind(days.list))
GER.pv.repl <- sort(unlist(GER.pv.repl), decreasing = TRUE)
GER.pv.org  <- dat.original[,col.pv.GER.org]
GER.pv.org  <- sort(GER.pv.org, decreasing = TRUE)
GER.pv.both <- as.data.frame(cbind(GER.pv.org, GER.pv.repl))
GER.pv.both$hour <- 1:nrow(GER.pv.both)
ggplot(GER.pv.both, aes(x = hour)) +
geom_line(aes(y = GER.pv.org, colour = "Original pv series" )) +
geom_line(aes(y = GER.pv.repl, colour = "Replicated pv series")) +
scale_colour_manual("",
breaks = c("Original pv series", "Replicated pv series"),
values = c("grey", "orange")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
no.cl    = 20
clusters = cutree(clus, k = no.cl)
rect.hclust(clus, k= no.cl, border="red")
centroid.vec  <- clust.centroid(dataframe = dat.unscaled, clusters.IND = clusters)
medoid.IND    <- clust.medoid(clusters.IND = clusters, distancematrix = as.matrix(Dis.ecl))
medoid.vec    <- dat.unscaled[medoid.IND,]
cluster.size  <- table(clusters)
col.load.GER     <- grepl("DE_load", colnames(medoid.vec))
GER.load         <- medoid.vec[,col.load.GER]
col.load.GER.org <- grepl("DE_load", colnames(dat.original))
days.list   <- list()
days.repl   <- for (i in 1:length(cluster.size)){
x <- as.data.frame(GER.load[rep(i, cluster.size[i]),])
days.list[[i]] <- x
}
GER.load.repl <- data.frame(list.rbind(days.list))
GER.load.repl <- sort(unlist(GER.load.repl), decreasing = TRUE)
GER.load.org  <- dat.original[,col.load.GER.org]
GER.load.org  <- sort(GER.load.org, decreasing = TRUE)
GER.load.both <- as.data.frame(cbind(GER.load.org, GER.load.repl))
GER.load.both$hour <- 1:nrow(GER.load.both)
ggplot(GER.load.both, aes(x = hour)) +
geom_line(aes(y = GER.load.org, colour = "Original LDC" )) +
geom_line(aes(y = GER.load.repl, colour = "Replicated LDC")) +
scale_colour_manual("",
breaks = c("Original LDC", "Replicated LDC"),
values = c("grey", "brown")) +
ylab(label="Load in MWh") +
xlab("Hours") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "grey")) + theme(
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
panel.background = element_blank(),
legend.key=element_blank())
rm(GER.load.both, GER.load.org, GER.load.repl,
col.load.GER, col.load.GER.org)
no.cl    = 30
clusters = cutree(clus, k = no.cl)
rect.hclust(clus, k= no.cl, border="red")
centroid.vec  <- clust.centroid(dataframe = dat.unscaled, clusters.IND = clusters)
medoid.IND    <- clust.medoid(clusters.IND = clusters, distancematrix = as.matrix(Dis.ecl))
medoid.vec    <- dat.unscaled[medoid.IND,]
cluster.size  <- table(clusters)
no.cl    = 30
clusters = cutree(clus, k = no.cl)
rect.hclust(clus, k= no.cl, border="red")
centroid.vec  <- clust.centroid(dataframe = dat.unscaled, clusters.IND = clusters)
medoid.IND    <- clust.medoid(clusters.IND = clusters, distancematrix = as.matrix(Dis.ecl))
medoid.vec    <- dat.unscaled[medoid.IND,]
cluster.size  <- table(clusters)
write.table(x = medoid.vec, file = "scenario30.csv")
test <- list()
test[[1]] c(1:10)
test[[1]] <- c(1:10)
a = list()
a[1] <- "A"
a[2] <- "B"
test[2] <- a
test[[2]] <- a
write.table(x = test, file = "test.csv")
save(medoid.vec, file = "scenario30.rda")
save(medoid.vec, file = "scenario30.rda")
write.csv(x = medoid.vec, file = "test.csv")
steps          <- nrow(medoid.vec)
steps          <- ncol(medoid.vec)/24
for (j in 1:steps){
}
j = 1
hours.day <- j*24-23
j = 2
hours.day <- j*24-23
hours.day <- j*24-23:j*24
hours.day <- {j*24-23}:{j*24}
j =3
hours.day <- {j*24-23}:{j*24}
i = 1
data.raw       <- data.frame()
steps          <- ncol(medoid.vec)/24
for (j in 1:steps){
hours.day    <- {j*24-23}:{j*24}
new.variable <- medoid.vec[i,hours.day]
data.raw[,j] <- t(new.variable)
}
hours.day    <- {j*24-23}:{j*24}
new.variable <- medoid.vec[i,hours.day]
new.variable <- t(medoid.vec[i,hours.day])
colnames(new.variable) <- colnames(medoid.vec[i,hours.day])[1]
View(new.variable)
data.raw       <- list()
data.raw[[j]] <- (new.variable)
for (j in 1:steps){
hours.day    <- {j*24-23}:{j*24}
new.variable <- t(medoid.vec[i,hours.day])
colnames(new.variable) <- colnames(medoid.vec[i,hours.day])[1]
data.raw[[j]] <- (new.variable)
}
?rlist
`rlist-package`
install.packages("rlist")
install.packages("rlist")
library(rlist)
scenarios[[i]] <- list.cbind(data.raw)
scenarios <- list()
scenarios[[i]] <- list.cbind(data.raw)
View(scenarios)
scenarios <- list()
for (i in 1:nrow(medoid.vec)){
data.raw       <- list()
steps          <- ncol(medoid.vec)/24
for (j in 1:steps){
hours.day    <- {j*24-23}:{j*24}
new.variable <- t(medoid.vec[i,hours.day])
colnames(new.variable) <- colnames(medoid.vec[i,hours.day])[1]
data.raw[[j]] <- (new.variable)
}
scenarios[[i]] <- list.cbind(data.raw)
}
save(scenarios, file = "scenarios30.rda")
write.csv(x = medoid.vec, file = "test.csv")
